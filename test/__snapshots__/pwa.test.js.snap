// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`pwa generate files (dist) 1`] = `
Array [
  "fixture/dist/.gitkeep",
  "fixture/dist/.nojekyll",
  "fixture/dist/200.html",
  "fixture/dist/_nuxt",
  "fixture/dist/_nuxt/LICENSES",
  "fixture/dist/_nuxt/icons",
  "fixture/dist/_nuxt/icons/icon_120x120.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_144x144.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_152x152.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_192x192.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_384x384.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_512x512.b8f3a1.png",
  "fixture/dist/_nuxt/icons/icon_64x64.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_ipad_1536x2048.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_ipadpro10_1668x2224.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_ipadpro12_2048x2732.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_ipadpro9_1536x2048.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphone6_50x1334.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphoneplus_1080x1920.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphonese_640x1136.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphonex_1125x2436.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphonexr_828x1792.b8f3a1.png",
  "fixture/dist/_nuxt/icons/splash_iphonexsmax_1242x2688.b8f3a1.png",
  "fixture/dist/_nuxt/manifest_test.webmanifest",
  "fixture/dist/_nuxt/static",
  "fixture/dist/_nuxt/static/default",
  "fixture/dist/_nuxt/static/default/bar",
  "fixture/dist/_nuxt/static/default/baz",
  "fixture/dist/_nuxt/static/default/foo",
  "fixture/dist/bar",
  "fixture/dist/bar/index.html",
  "fixture/dist/baz",
  "fixture/dist/baz/index.html",
  "fixture/dist/foo",
  "fixture/dist/foo/index.html",
  "fixture/dist/icon.png",
  "fixture/dist/index.html",
  "fixture/dist/offline.html",
  "fixture/dist/offline.png",
]
`;

exports[`pwa manifest.json 1`] = `
"{
  \\"name\\": \\"Test Project Name\\",
  \\"short_name\\": \\"@nuxtjs/pwa\\",
  \\"description\\": \\"Test Project Description\\",
  \\"icons\\": [
    {
      \\"src\\": \\"/_nuxt/icons/icon_64x64.b8f3a1.png\\",
      \\"sizes\\": \\"64x64\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_120x120.b8f3a1.png\\",
      \\"sizes\\": \\"120x120\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_144x144.b8f3a1.png\\",
      \\"sizes\\": \\"144x144\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_152x152.b8f3a1.png\\",
      \\"sizes\\": \\"152x152\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_192x192.b8f3a1.png\\",
      \\"sizes\\": \\"192x192\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_384x384.b8f3a1.png\\",
      \\"sizes\\": \\"384x384\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    },
    {
      \\"src\\": \\"/_nuxt/icons/icon_512x512.b8f3a1.png\\",
      \\"sizes\\": \\"512x512\\",
      \\"type\\": \\"image/png\\",
      \\"purpose\\": \\"any maskable\\"
    }
  ],
  \\"start_url\\": \\"/?standalone=true\\",
  \\"display\\": \\"standalone\\",
  \\"background_color\\": \\"#ffffff\\",
  \\"lang\\": \\"en\\",
  \\"orientation\\": \\"portrait\\"
}"
`;

exports[`pwa sw.js 1`] = `
"const options = {\\"workboxURL\\":\\"https://cdn.jsdelivr.net/npm/workbox-cdn/workbox/workbox-sw.js\\",\\"importScripts\\":[\\"custom-sw.js\\"],\\"config\\":{\\"debug\\":true},\\"cacheNames\\":{\\"prefix\\":\\"test\\",\\"googleAnalytics\\":\\"test-ga\\"},\\"cacheOptions\\":{\\"revision\\":\\"test-rev\\",\\"cacheId\\":\\"@nuxtjs/pwa-prod\\"},\\"clientsClaim\\":true,\\"skipWaiting\\":true,\\"cleanupOutdatedCaches\\":true,\\"offlineAnalytics\\":true,\\"preCaching\\":[{\\"revision\\":\\"test-rev\\",\\"url\\":\\"/?standalone=true\\"},{\\"revision\\":\\"test-rev\\",\\"url\\":\\"precache.js\\"}],\\"runtimeCaching\\":[{\\"urlPattern\\":\\"https://google.com/.*\\",\\"handler\\":\\"CacheFirst\\",\\"method\\":\\"GET\\",\\"strategyPlugins\\":[]},{\\"urlPattern\\":\\"https://pwa.nuxtjs.org/.*\\",\\"handler\\":\\"CacheFirst\\",\\"method\\":\\"GET\\",\\"strategyOptions\\":{\\"cacheName\\":\\"nuxt-pwa\\"},\\"strategyPlugins\\":[{\\"use\\":\\"expiration.ExpirationPlugin\\",\\"config\\":[{\\"maxEntries\\":10,\\"maxAgeSeconds\\":300}]}]},{\\"urlPattern\\":\\"/_nuxt/\\",\\"handler\\":\\"CacheFirst\\",\\"method\\":\\"GET\\",\\"strategyPlugins\\":[]},{\\"urlPattern\\":\\"/\\",\\"handler\\":\\"NetworkFirst\\",\\"method\\":\\"GET\\",\\"strategyPlugins\\":[]}],\\"offlinePage\\":null,\\"pagesURLPattern\\":\\"/\\",\\"offlineStrategy\\":\\"NetworkFirst\\"}

importScripts(...[options.workboxURL, ...options.importScripts])

initWorkbox(workbox, options)
workboxExtensions(workbox, options)
precacheAssets(workbox, options)
cachingExtensions(workbox, options)
runtimeCaching(workbox, options)
offlinePage(workbox, options)
routingExtensions(workbox, options)

function getProp(obj, prop) {
  return prop.split('.').reduce((p, c) => p[c], obj)
}

function initWorkbox(workbox, options) {
  if (options.config) {
    // Set workbox config
    workbox.setConfig(options.config)
  }

  if (options.cacheNames) {
    // Set workbox cache names
    workbox.core.setCacheNameDetails(options.cacheNames)
  }

  if (options.clientsClaim) {
    // Start controlling any existing clients as soon as it activates
    workbox.core.clientsClaim()
  }

  if (options.skipWaiting) {
    workbox.core.skipWaiting()
  }

  if (options.cleanupOutdatedCaches) {
    workbox.precaching.cleanupOutdatedCaches()
  }

  if (options.offlineAnalytics) {
    // Enable offline Google Analytics tracking
    workbox.googleAnalytics.initialize()
  }
}

function precacheAssets(workbox, options) {
  if (options.preCaching.length) {
    workbox.precaching.precacheAndRoute(options.preCaching, options.cacheOptions)
  }
}


function runtimeCaching(workbox, options) {
  const requestInterceptor = {
    requestWillFetch({ request }) {
      if (request.cache === 'only-if-cached' && request.mode === 'no-cors') {
        return new Request(request.url, { ...request, cache: 'default', mode: 'no-cors' })
      }
      return request
    },
    fetchDidFail(ctx) {
      ctx.error.message =
        '[workbox] Network request for ' + ctx.request.url + ' threw an error: ' + ctx.error.message
      console.error(ctx.error, 'Details:', ctx)
    },
    handlerDidError(ctx) {
      ctx.error.message =
        \`[workbox] Network handler threw an error: \` + ctx.error.message
      console.error(ctx.error, 'Details:', ctx)
      return null
    }
  }

  for (const entry of options.runtimeCaching) {
    const urlPattern = new RegExp(entry.urlPattern)
    const method = entry.method || 'GET'

    const plugins = (entry.strategyPlugins || [])
      .map(p => new (getProp(workbox, p.use))(...p.config))

    plugins.unshift(requestInterceptor)

    const strategyOptions = { ...entry.strategyOptions, plugins }

    const strategy = new workbox.strategies[entry.handler](strategyOptions)

    workbox.routing.registerRoute(urlPattern, strategy, method)
  }
}

function offlinePage(workbox, options) {
  if (options.offlinePage) {
    // Register router handler for offlinePage
    workbox.routing.registerRoute(new RegExp(options.pagesURLPattern), ({ request, event }) => {
      const strategy = new workbox.strategies[options.offlineStrategy]
      return strategy
        .handle({ request, event })
        .catch(() => caches.matchPrecache(options.offlinePage))
    })
  }
}

function workboxExtensions(workbox, options) {
  // Workbox Extension
}

function cachingExtensions(workbox, options) {
  // Caching Extension
}

function routingExtensions(workbox, options) {
  // Routing Extension
}
"
`;
